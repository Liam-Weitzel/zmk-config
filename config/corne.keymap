/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "mouse.dtsi"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hold_tap_mo_kp: hold_tap_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MO_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        backspace_del: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        left_mleft: left_mleft {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_MLEFT";
            bindings = <&kp LEFT>, <U_MS_L>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        right_mright: right_mright {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_MRIGHT";
            bindings = <&kp RIGHT>, <U_MS_R>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        up_mup: up_mup {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_MUP";
            bindings = <&kp UP>, <U_MS_U>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        down_mdown: down_mdown {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_MDOWN";
            bindings = <&kp DOWN_ARROW>, <U_MS_D>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        mod_morph_plus_equals: mod_morph_plus_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_PLUS_EQUALS";
            bindings = <&kp PLUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hold_tap_kp_kp_no_idle: hold_tap_kp_kp_no_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KP_KP_NO_IDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        tog_9_mod_morph: tog_9_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_9_MOD_MORPH";
            bindings = <&kp C>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_1_mod_morph: tog_1_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_1_MOD_MORPH";
            bindings = <&kp Q>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_2_mod_morph: tog_2_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_2_MOD_MORPH";
            bindings = <&kp W>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_3_mod_morph: tog_3_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_3_MOD_MORPH";
            bindings = <&kp F>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_4_mod_morph: tog_4_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_4_MOD_MORPH";
            bindings = <&kp A>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_5_mod_morph: tog_5_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_5_MOD_MORPH";
            bindings = <&kp R>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_6_mod_morph: tog_6_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_6_MOD_MORPH";
            bindings = <&kp S>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_7_mod_morph: tog_7_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_7_MOD_MORPH";
            bindings = <&kp Z>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_8_mod_morph: tog_8_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_8_MOD_MORPH";
            bindings = <&kp X>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        sticky_key: sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <120>;
            quick-release;
        };

        shift: shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT";
            bindings = <&kp>, <&sticky_key>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
        };

        ctrl_shift: ctrl_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp RSHIFT>;

            tapping-term-ms = <300>;
        };

        ralt_mb1: ralt_mb1 {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_MB1";
            bindings = <&mkp MB1>, <&mkp MB1>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        ralt_mb2: ralt_mb2 {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_MB2";
            bindings = <&mkp MB2>, <&mkp MB2>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        ralt_mb3: ralt_mb3 {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_MB3";
            bindings = <&mkp MB3>, <&mkp MB3>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        mkp_morph1: mkp_morph1 {
            compatible = "zmk,behavior-mod-morph";
            label = "MKP_MORPH1";
            bindings = <&mkp_morph2>, <&mkp MB2>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mkp_morph2: mkp_morph2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MKP_MORPH2";
            bindings = <&mkp MB1>, <&mkp MB3>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        end_left {
            bindings = <&kp END>;
            key-positions = <27 28 38>;
            require-prior-idle-ms = <0>;
        };

        home_left {
            bindings = <&kp HOME>;
            key-positions = <27 28 37>;
        };

        esc_left {
            bindings = <&kp ESCAPE>;
            key-positions = <16 15 37>;
        };

        esc_right {
            bindings = <&kp ESCAPE>;
            key-positions = <20 19 40>;
        };

        end_right {
            bindings = <&kp END>;
            key-positions = <31 32 40>;
        };

        home_right {
            bindings = <&kp HOME>;
            key-positions = <39 31 32>;
        };

        shift_copy_left {
            bindings = <&kp LS(LC(C))>;
            key-positions = <38 15 28>;
        };

        shift_paste_left {
            bindings = <&kp LS(LC(V))>;
            key-positions = <38 15 29>;
        };

        ctrl_shift_t_left {
            bindings = <&kp LC(LS(T))>;
            key-positions = <36 15 16>;
        };

        nav_lock {
            bindings = <&tog 2>;
            key-positions = <31 32 33>;
            layers = <1 2 3>;
        };

        func_lock {
            bindings = <&tog 8>;
            key-positions = <26 27 28>;
            layers = <11 9 10>;
        };

        num_lock {
            bindings = <&tog 5>;
            key-positions = <26 27 28>;
            layers = <5 4 6>;
        };

        sys_lock {
            bindings = <&tog 11>;
            key-positions = <31 32 33>;
            layers = <11 11 12>;
        };

        quit_left {
            bindings = <&kp LS(LG(Q))>;
            key-positions = <16 38 1>;
        };

        enter_left {
            bindings = <&kp ENTER>;
            key-positions = <38 15 16>;
        };

        enter_right {
            bindings = <&kp ENTER>;
            key-positions = <20 19 39>;
        };

        backspace_left {
            bindings = <&kp BACKSPACE>;
            key-positions = <15 38 17>;
        };

        combo_1 {
            bindings = <&kp F13>;
            key-positions = <1 2 3>;
            require-prior-idle-ms = <0>;
        };
        combo_2 {
            bindings = <&kp LC(F13)>;
            key-positions = <1 2 4>;
            require-prior-idle-ms = <0>;
        };
        combo_3 {
            bindings = <&kp LS(F13)>;
            key-positions = <1 2 5>;
            require-prior-idle-ms = <0>;
        };
        combo_4 {
            bindings = <&kp LA(F13)>;
            key-positions = <1 2 6>;
            require-prior-idle-ms = <0>;
        };
        combo_5 {
            bindings = <&kp LMETA(F13)>;
            key-positions = <1 2 7>;
            require-prior-idle-ms = <0>;
        };
        combo_6 {
            bindings = <&kp LC(LS(F13))>;
            key-positions = <1 2 8>;
            require-prior-idle-ms = <0>;
        };
        combo_7 {
            bindings = <&kp LC(LA(F13))>;
            key-positions = <1 2 9>;
            require-prior-idle-ms = <0>;
        };
        combo_8 {
            bindings = <&kp LC(LMETA(F13))>;
            key-positions = <1 2 10>;
            require-prior-idle-ms = <0>;
        };
        combo_9 {
            bindings = <&kp LS(LA(F13))>;
            key-positions = <1 2 13>;
            require-prior-idle-ms = <0>;
        };
        combo_10 {
            bindings = <&kp LS(LMETA(F13))>;
            key-positions = <1 2 14>;
            require-prior-idle-ms = <0>;
        };
        combo_11 {
            bindings = <&kp LA(LMETA(F13))>;
            key-positions = <1 2 15>;
            require-prior-idle-ms = <0>;
        };
        combo_12 {
            bindings = <&kp LC(LS(LA(F13)))>;
            key-positions = <1 2 16>;
            require-prior-idle-ms = <0>;
        };
        combo_13 {
            bindings = <&kp LC(LS(LMETA(F13)))>;
            key-positions = <1 2 17>;
            require-prior-idle-ms = <0>;
        };
        combo_14 {
            bindings = <&kp LC(LA(LMETA(F13)))>;
            key-positions = <1 2 18>;
            require-prior-idle-ms = <0>;
        };
        combo_15 {
            bindings = <&kp LS(LA(LMETA(F13)))>;
            key-positions = <1 2 19>;
            require-prior-idle-ms = <0>;
        };
        combo_16 {
            bindings = <&kp LC(LS(LA(LMETA(F13))))>;
            key-positions = <1 2 20>;
            require-prior-idle-ms = <0>;
        };
        combo_17 {
            bindings = <&kp F14>;
            key-positions = <1 2 21>;
            require-prior-idle-ms = <0>;
        };
        combo_18 {
            bindings = <&kp LC(F14)>;
            key-positions = <1 2 22>;
            require-prior-idle-ms = <0>;
        };
        combo_19 {
            bindings = <&kp LS(F14)>;
            key-positions = <1 2 25>;
            require-prior-idle-ms = <0>;
        };
        combo_20 {
            bindings = <&kp LA(F14)>;
            key-positions = <1 2 26>;
            require-prior-idle-ms = <0>;
        };
        combo_21 {
            bindings = <&kp LMETA(F14)>;
            key-positions = <1 2 27>;
            require-prior-idle-ms = <0>;
        };
        combo_22 {
            bindings = <&kp LC(LS(F14))>;
            key-positions = <1 2 28>;
            require-prior-idle-ms = <0>;
        };
        combo_23 {
            bindings = <&kp LC(LA(F14))>;
            key-positions = <1 2 29>;
            require-prior-idle-ms = <0>;
        };
        combo_24 {
            bindings = <&kp LC(LMETA(F14))>;
            key-positions = <1 2 30>;
            require-prior-idle-ms = <0>;
        };
        combo_25 {
            bindings = <&kp LS(LA(F14))>;
            key-positions = <1 2 31>;
            require-prior-idle-ms = <0>;
        };
        combo_26 {
            bindings = <&kp LS(LMETA(F14))>;
            key-positions = <1 2 32>;
            require-prior-idle-ms = <0>;
        };
        combo_27 {
            bindings = <&kp LA(LMETA(F14))>;
            key-positions = <1 2 33>;
            require-prior-idle-ms = <0>;
        };
        combo_28 {
            bindings = <&kp LC(LS(LA(F14)))>;
            key-positions = <1 2 34>;
            require-prior-idle-ms = <0>;
        };
        combo_29 {
            bindings = <&kp LC(LS(LMETA(F14)))>;
            key-positions = <1 2 36>;
            require-prior-idle-ms = <0>;
        };
        combo_30 {
            bindings = <&kp LC(LA(LMETA(F14)))>;
            key-positions = <1 2 37>;
            require-prior-idle-ms = <0>;
        };
        combo_31 {
            bindings = <&kp LS(LA(LMETA(F14)))>;
            key-positions = <1 2 38>;
            require-prior-idle-ms = <0>;
        };
        combo_32 {
            bindings = <&kp LC(LS(LA(LMETA(F14))))>;
            key-positions = <1 2 39>;
            require-prior-idle-ms = <0>;
        };
        combo_33 {
            bindings = <&kp F15>;
            key-positions = <1 2 40>;
            require-prior-idle-ms = <0>;
        };
        combo_34 {
            bindings = <&kp LC(F15)>;
            key-positions = <1 2 41>;
            require-prior-idle-ms = <0>;
        };
        combo_35 {
            bindings = <&kp LS(F15)>;
            key-positions = <1 3 4>;
            require-prior-idle-ms = <0>;
        };
        combo_36 {
            bindings = <&kp LA(F15)>;
            key-positions = <1 3 5>;
            require-prior-idle-ms = <0>;
        };
        combo_37 {
            bindings = <&kp LMETA(F15)>;
            key-positions = <1 3 6>;
            require-prior-idle-ms = <0>;
        };
        combo_38 {
            bindings = <&kp LC(LS(F15))>;
            key-positions = <1 3 7>;
            require-prior-idle-ms = <0>;
        };
        combo_39 {
            bindings = <&kp LC(LA(F15))>;
            key-positions = <1 3 8>;
            require-prior-idle-ms = <0>;
        };
        combo_40 {
            bindings = <&kp LC(LMETA(F15))>;
            key-positions = <1 3 9>;
            require-prior-idle-ms = <0>;
        };
        combo_41 {
            bindings = <&kp LS(LA(F15))>;
            key-positions = <1 3 10>;
            require-prior-idle-ms = <0>;
        };
        combo_42 {
            bindings = <&kp LS(LMETA(F15))>;
            key-positions = <1 3 13>;
            require-prior-idle-ms = <0>;
        };
        combo_43 {
            bindings = <&kp LA(LMETA(F15))>;
            key-positions = <1 3 14>;
            require-prior-idle-ms = <0>;
        };
        combo_44 {
            bindings = <&kp LC(LS(LA(F15)))>;
            key-positions = <1 3 15>;
            require-prior-idle-ms = <0>;
        };
        combo_45 {
            bindings = <&kp LC(LS(LMETA(F15)))>;
            key-positions = <1 3 16>;
            require-prior-idle-ms = <0>;
        };
        combo_46 {
            bindings = <&kp LC(LA(LMETA(F15)))>;
            key-positions = <1 3 17>;
            require-prior-idle-ms = <0>;
        };
        combo_47 {
            bindings = <&kp LS(LA(LMETA(F15)))>;
            key-positions = <1 3 18>;
            require-prior-idle-ms = <0>;
        };
        combo_48 {
            bindings = <&kp LC(LS(LA(LMETA(F15))))>;
            key-positions = <1 3 19>;
            require-prior-idle-ms = <0>;
        };
        combo_49 {
            bindings = <&kp F16>;
            key-positions = <1 3 20>;
            require-prior-idle-ms = <0>;
        };
        combo_50 {
            bindings = <&kp LC(F16)>;
            key-positions = <1 3 21>;
            require-prior-idle-ms = <0>;
        };
        combo_51 {
            bindings = <&kp LS(F16)>;
            key-positions = <1 3 22>;
            require-prior-idle-ms = <0>;
        };
        combo_52 {
            bindings = <&kp LA(F16)>;
            key-positions = <1 3 25>;
            require-prior-idle-ms = <0>;
        };
        combo_53 {
            bindings = <&kp LMETA(F16)>;
            key-positions = <1 3 26>;
            require-prior-idle-ms = <0>;
        };
        combo_54 {
            bindings = <&kp LC(LS(F16))>;
            key-positions = <1 3 27>;
            require-prior-idle-ms = <0>;
        };
        combo_55 {
            bindings = <&kp LC(LA(F16))>;
            key-positions = <1 3 28>;
            require-prior-idle-ms = <0>;
        };
        combo_56 {
            bindings = <&kp LC(LMETA(F16))>;
            key-positions = <1 3 29>;
            require-prior-idle-ms = <0>;
        };
        combo_57 {
            bindings = <&kp LS(LA(F16))>;
            key-positions = <1 3 30>;
            require-prior-idle-ms = <0>;
        };
        combo_58 {
            bindings = <&kp LS(LMETA(F16))>;
            key-positions = <1 3 31>;
            require-prior-idle-ms = <0>;
        };
        combo_59 {
            bindings = <&kp LA(LMETA(F16))>;
            key-positions = <1 3 32>;
            require-prior-idle-ms = <0>;
        };
        combo_60 {
            bindings = <&kp LC(LS(LA(F16)))>;
            key-positions = <1 3 33>;
            require-prior-idle-ms = <0>;
        };
        combo_61 {
            bindings = <&kp LC(LS(LMETA(F16)))>;
            key-positions = <1 3 34>;
            require-prior-idle-ms = <0>;
        };
        combo_62 {
            bindings = <&kp LC(LA(LMETA(F16)))>;
            key-positions = <1 3 36>;
            require-prior-idle-ms = <0>;
        };
        combo_63 {
            bindings = <&kp LS(LA(LMETA(F16)))>;
            key-positions = <1 3 37>;
            require-prior-idle-ms = <0>;
        };
        combo_64 {
            bindings = <&kp LC(LS(LA(LMETA(F16))))>;
            key-positions = <1 3 38>;
            require-prior-idle-ms = <0>;
        };
        combo_65 {
            bindings = <&kp F17>;
            key-positions = <1 3 39>;
            require-prior-idle-ms = <0>;
        };
        combo_66 {
            bindings = <&kp LC(F17)>;
            key-positions = <1 3 40>;
            require-prior-idle-ms = <0>;
        };
        combo_67 {
            bindings = <&kp LS(F17)>;
            key-positions = <1 3 41>;
            require-prior-idle-ms = <0>;
        };
        combo_68 {
            bindings = <&kp LA(F17)>;
            key-positions = <1 4 5>;
            require-prior-idle-ms = <0>;
        };
        combo_69 {
            bindings = <&kp LMETA(F17)>;
            key-positions = <1 4 6>;
            require-prior-idle-ms = <0>;
        };
        combo_70 {
            bindings = <&kp LC(LS(F17))>;
            key-positions = <1 4 7>;
            require-prior-idle-ms = <0>;
        };
        combo_71 {
            bindings = <&kp LC(LA(F17))>;
            key-positions = <1 4 8>;
            require-prior-idle-ms = <0>;
        };
        combo_72 {
            bindings = <&kp LC(LMETA(F17))>;
            key-positions = <1 4 9>;
            require-prior-idle-ms = <0>;
        };
        combo_73 {
            bindings = <&kp LS(LA(F17))>;
            key-positions = <1 4 10>;
            require-prior-idle-ms = <0>;
        };
        combo_74 {
            bindings = <&kp LS(LMETA(F17))>;
            key-positions = <1 4 13>;
            require-prior-idle-ms = <0>;
        };
        combo_75 {
            bindings = <&kp LA(LMETA(F17))>;
            key-positions = <1 4 14>;
            require-prior-idle-ms = <0>;
        };
        combo_76 {
            bindings = <&kp LC(LS(LA(F17)))>;
            key-positions = <1 4 15>;
            require-prior-idle-ms = <0>;
        };
        combo_77 {
            bindings = <&kp LC(LS(LMETA(F17)))>;
            key-positions = <1 4 16>;
            require-prior-idle-ms = <0>;
        };
        combo_78 {
            bindings = <&kp LC(LA(LMETA(F17)))>;
            key-positions = <1 4 17>;
            require-prior-idle-ms = <0>;
        };
        combo_79 {
            bindings = <&kp LS(LA(LMETA(F17)))>;
            key-positions = <1 4 18>;
            require-prior-idle-ms = <0>;
        };
        combo_80 {
            bindings = <&kp LC(LS(LA(LMETA(F17))))>;
            key-positions = <1 4 19>;
            require-prior-idle-ms = <0>;
        };
        combo_81 {
            bindings = <&kp F18>;
            key-positions = <1 4 20>;
            require-prior-idle-ms = <0>;
        };
        combo_82 {
            bindings = <&kp LC(F18)>;
            key-positions = <1 4 21>;
            require-prior-idle-ms = <0>;
        };
        combo_83 {
            bindings = <&kp LS(F18)>;
            key-positions = <1 4 22>;
            require-prior-idle-ms = <0>;
        };
        combo_84 {
            bindings = <&kp LA(F18)>;
            key-positions = <1 4 25>;
            require-prior-idle-ms = <0>;
        };
        combo_85 {
            bindings = <&kp LMETA(F18)>;
            key-positions = <1 4 26>;
            require-prior-idle-ms = <0>;
        };
        combo_86 {
            bindings = <&kp LC(LS(F18))>;
            key-positions = <1 4 27>;
            require-prior-idle-ms = <0>;
        };
        combo_87 {
            bindings = <&kp LC(LA(F18))>;
            key-positions = <1 4 28>;
            require-prior-idle-ms = <0>;
        };
        combo_88 {
            bindings = <&kp LC(LMETA(F18))>;
            key-positions = <1 4 29>;
            require-prior-idle-ms = <0>;
        };
        combo_89 {
            bindings = <&kp LS(LA(F18))>;
            key-positions = <1 4 30>;
            require-prior-idle-ms = <0>;
        };
        combo_90 {
            bindings = <&kp LS(LMETA(F18))>;
            key-positions = <1 4 31>;
            require-prior-idle-ms = <0>;
        };
        combo_91 {
            bindings = <&kp LA(LMETA(F18))>;
            key-positions = <1 4 32>;
            require-prior-idle-ms = <0>;
        };
        combo_92 {
            bindings = <&kp LC(LS(LA(F18)))>;
            key-positions = <1 4 33>;
            require-prior-idle-ms = <0>;
        };
        combo_93 {
            bindings = <&kp LC(LS(LMETA(F18)))>;
            key-positions = <1 4 34>;
            require-prior-idle-ms = <0>;
        };
        combo_94 {
            bindings = <&kp LC(LA(LMETA(F18)))>;
            key-positions = <1 4 36>;
            require-prior-idle-ms = <0>;
        };
        combo_95 {
            bindings = <&kp LS(LA(LMETA(F18)))>;
            key-positions = <1 4 37>;
            require-prior-idle-ms = <0>;
        };
        combo_96 {
            bindings = <&kp LC(LS(LA(LMETA(F18))))>;
            key-positions = <1 4 38>;
            require-prior-idle-ms = <0>;
        };
        combo_97 {
            bindings = <&kp F19>;
            key-positions = <1 4 39>;
            require-prior-idle-ms = <0>;
        };
        combo_98 {
            bindings = <&kp LC(F19)>;
            key-positions = <1 4 40>;
            require-prior-idle-ms = <0>;
        };
        combo_99 {
            bindings = <&kp LS(F19)>;
            key-positions = <1 4 41>;
            require-prior-idle-ms = <0>;
        };
        combo_100 {
            bindings = <&kp LA(F19)>;
            key-positions = <1 5 6>;
            require-prior-idle-ms = <0>;
        };
        combo_101 {
            bindings = <&kp LMETA(F19)>;
            key-positions = <1 5 7>;
            require-prior-idle-ms = <0>;
        };
        combo_102 {
            bindings = <&kp LC(LS(F19))>;
            key-positions = <1 5 8>;
            require-prior-idle-ms = <0>;
        };
        combo_103 {
            bindings = <&kp LC(LA(F19))>;
            key-positions = <1 5 9>;
            require-prior-idle-ms = <0>;
        };
        combo_104 {
            bindings = <&kp LC(LMETA(F19))>;
            key-positions = <1 5 10>;
            require-prior-idle-ms = <0>;
        };
        combo_105 {
            bindings = <&kp LS(LA(F19))>;
            key-positions = <1 5 13>;
            require-prior-idle-ms = <0>;
        };
        combo_106 {
            bindings = <&kp LS(LMETA(F19))>;
            key-positions = <1 5 14>;
            require-prior-idle-ms = <0>;
        };
        combo_107 {
            bindings = <&kp LA(LMETA(F19))>;
            key-positions = <1 5 15>;
            require-prior-idle-ms = <0>;
        };
        combo_108 {
            bindings = <&kp LC(LS(LA(F19)))>;
            key-positions = <1 5 16>;
            require-prior-idle-ms = <0>;
        };
        combo_109 {
            bindings = <&kp LC(LS(LMETA(F19)))>;
            key-positions = <1 5 17>;
            require-prior-idle-ms = <0>;
        };
        combo_110 {
            bindings = <&kp LC(LA(LMETA(F19)))>;
            key-positions = <1 5 18>;
            require-prior-idle-ms = <0>;
        };
        combo_111 {
            bindings = <&kp LS(LA(LMETA(F19)))>;
            key-positions = <1 5 19>;
            require-prior-idle-ms = <0>;
        };
        combo_112 {
            bindings = <&kp LC(LS(LA(LMETA(F19))))>;
            key-positions = <1 5 20>;
            require-prior-idle-ms = <0>;
        };
        combo_113 {
            bindings = <&kp F20>;
            key-positions = <1 5 21>;
            require-prior-idle-ms = <0>;
        };
        combo_114 {
            bindings = <&kp LC(F20)>;
            key-positions = <1 5 22>;
            require-prior-idle-ms = <0>;
        };
        combo_115 {
            bindings = <&kp LS(F20)>;
            key-positions = <1 5 25>;
            require-prior-idle-ms = <0>;
        };
        combo_116 {
            bindings = <&kp LA(F20)>;
            key-positions = <1 5 26>;
            require-prior-idle-ms = <0>;
        };
        combo_117 {
            bindings = <&kp LMETA(F20)>;
            key-positions = <1 5 27>;
            require-prior-idle-ms = <0>;
        };
        combo_118 {
            bindings = <&kp LC(LS(F20))>;
            key-positions = <1 5 28>;
            require-prior-idle-ms = <0>;
        };
        combo_119 {
            bindings = <&kp LC(LA(F20))>;
            key-positions = <1 5 29>;
            require-prior-idle-ms = <0>;
        };
        combo_120 {
            bindings = <&kp LC(LMETA(F20))>;
            key-positions = <1 5 30>;
            require-prior-idle-ms = <0>;
        };
        combo_121 {
            bindings = <&kp LS(LA(F20))>;
            key-positions = <1 5 31>;
            require-prior-idle-ms = <0>;
        };
        combo_122 {
            bindings = <&kp LS(LMETA(F20))>;
            key-positions = <1 5 32>;
            require-prior-idle-ms = <0>;
        };
        combo_123 {
            bindings = <&kp LA(LMETA(F20))>;
            key-positions = <1 5 33>;
            require-prior-idle-ms = <0>;
        };
        combo_124 {
            bindings = <&kp LC(LS(LA(F20)))>;
            key-positions = <1 5 34>;
            require-prior-idle-ms = <0>;
        };
        combo_125 {
            bindings = <&kp LC(LS(LMETA(F20)))>;
            key-positions = <1 5 36>;
            require-prior-idle-ms = <0>;
        };
        combo_126 {
            bindings = <&kp LC(LA(LMETA(F20)))>;
            key-positions = <1 5 37>;
            require-prior-idle-ms = <0>;
        };
        combo_127 {
            bindings = <&kp LS(LA(LMETA(F20)))>;
            key-positions = <1 5 38>;
            require-prior-idle-ms = <0>;
        };
        combo_128 {
            bindings = <&kp LC(LS(LA(LMETA(F20))))>;
            key-positions = <1 5 39>;
            require-prior-idle-ms = <0>;
        };
        combo_129 {
            bindings = <&kp F21>;
            key-positions = <1 5 40>;
            require-prior-idle-ms = <0>;
        };
        combo_130 {
            bindings = <&kp LC(F21)>;
            key-positions = <1 5 41>;
            require-prior-idle-ms = <0>;
        };
        combo_131 {
            bindings = <&kp LS(F21)>;
            key-positions = <1 6 7>;
            require-prior-idle-ms = <0>;
        };
        combo_132 {
            bindings = <&kp LA(F21)>;
            key-positions = <1 6 8>;
            require-prior-idle-ms = <0>;
        };
        combo_133 {
            bindings = <&kp LMETA(F21)>;
            key-positions = <1 6 9>;
            require-prior-idle-ms = <0>;
        };
        combo_134 {
            bindings = <&kp LC(LS(F21))>;
            key-positions = <1 6 10>;
            require-prior-idle-ms = <0>;
        };
        combo_135 {
            bindings = <&kp LC(LA(F21))>;
            key-positions = <1 6 13>;
            require-prior-idle-ms = <0>;
        };
        combo_136 {
            bindings = <&kp LC(LMETA(F21))>;
            key-positions = <1 6 14>;
            require-prior-idle-ms = <0>;
        };
        combo_137 {
            bindings = <&kp LS(LA(F21))>;
            key-positions = <1 6 15>;
            require-prior-idle-ms = <0>;
        };
        combo_138 {
            bindings = <&kp LS(LMETA(F21))>;
            key-positions = <1 6 16>;
            require-prior-idle-ms = <0>;
        };
        combo_139 {
            bindings = <&kp LA(LMETA(F21))>;
            key-positions = <1 6 17>;
            require-prior-idle-ms = <0>;
        };
        combo_140 {
            bindings = <&kp LC(LS(LA(F21)))>;
            key-positions = <1 6 18>;
            require-prior-idle-ms = <0>;
        };
        combo_141 {
            bindings = <&kp LC(LS(LMETA(F21)))>;
            key-positions = <1 6 19>;
            require-prior-idle-ms = <0>;
        };
        combo_142 {
            bindings = <&kp LC(LA(LMETA(F21)))>;
            key-positions = <1 6 20>;
            require-prior-idle-ms = <0>;
        };
        combo_143 {
            bindings = <&kp LS(LA(LMETA(F21)))>;
            key-positions = <1 6 21>;
            require-prior-idle-ms = <0>;
        };
        combo_144 {
            bindings = <&kp LC(LS(LA(LMETA(F21))))>;
            key-positions = <1 6 22>;
            require-prior-idle-ms = <0>;
        };
        combo_145 {
            bindings = <&kp F22>;
            key-positions = <1 6 25>;
            require-prior-idle-ms = <0>;
        };
        combo_146 {
            bindings = <&kp LC(F22)>;
            key-positions = <1 6 26>;
            require-prior-idle-ms = <0>;
        };
        combo_147 {
            bindings = <&kp LS(F22)>;
            key-positions = <1 6 27>;
            require-prior-idle-ms = <0>;
        };
        combo_148 {
            bindings = <&kp LA(F22)>;
            key-positions = <1 6 28>;
            require-prior-idle-ms = <0>;
        };
        combo_149 {
            bindings = <&kp LMETA(F22)>;
            key-positions = <1 6 29>;
            require-prior-idle-ms = <0>;
        };
        combo_150 {
            bindings = <&kp LC(LS(F22))>;
            key-positions = <1 6 30>;
            require-prior-idle-ms = <0>;
        };
        combo_151 {
            bindings = <&kp LC(LA(F22))>;
            key-positions = <1 6 31>;
            require-prior-idle-ms = <0>;
        };
        combo_152 {
            bindings = <&kp LC(LMETA(F22))>;
            key-positions = <1 6 32>;
            require-prior-idle-ms = <0>;
        };
        combo_153 {
            bindings = <&kp LS(LA(F22))>;
            key-positions = <1 6 33>;
            require-prior-idle-ms = <0>;
        };
        combo_154 {
            bindings = <&kp LS(LMETA(F22))>;
            key-positions = <1 6 34>;
            require-prior-idle-ms = <0>;
        };
        combo_155 {
            bindings = <&kp LA(LMETA(F22))>;
            key-positions = <1 6 36>;
            require-prior-idle-ms = <0>;
        };
        combo_156 {
            bindings = <&kp LC(LS(LA(F22)))>;
            key-positions = <1 6 37>;
            require-prior-idle-ms = <0>;
        };
        combo_157 {
            bindings = <&kp LC(LS(LMETA(F22)))>;
            key-positions = <1 6 38>;
            require-prior-idle-ms = <0>;
        };
        combo_158 {
            bindings = <&kp LC(LA(LMETA(F22)))>;
            key-positions = <1 6 39>;
            require-prior-idle-ms = <0>;
        };
        combo_159 {
            bindings = <&kp LS(LA(LMETA(F22)))>;
            key-positions = <1 6 40>;
            require-prior-idle-ms = <0>;
        };
        combo_160 {
            bindings = <&kp LC(LS(LA(LMETA(F22))))>;
            key-positions = <1 6 41>;
            require-prior-idle-ms = <0>;
        };
        combo_161 {
            bindings = <&kp F23>;
            key-positions = <1 7 8>;
            require-prior-idle-ms = <0>;
        };
        combo_162 {
            bindings = <&kp LC(F23)>;
            key-positions = <1 7 9>;
            require-prior-idle-ms = <0>;
        };
        combo_163 {
            bindings = <&kp LS(F23)>;
            key-positions = <1 7 10>;
            require-prior-idle-ms = <0>;
        };
        combo_164 {
            bindings = <&kp LA(F23)>;
            key-positions = <1 7 13>;
            require-prior-idle-ms = <0>;
        };
        combo_165 {
            bindings = <&kp LMETA(F23)>;
            key-positions = <1 7 14>;
            require-prior-idle-ms = <0>;
        };
        combo_166 {
            bindings = <&kp LC(LS(F23))>;
            key-positions = <1 7 15>;
            require-prior-idle-ms = <0>;
        };
        combo_167 {
            bindings = <&kp LC(LA(F23))>;
            key-positions = <1 7 16>;
            require-prior-idle-ms = <0>;
        };
        combo_168 {
            bindings = <&kp LC(LMETA(F23))>;
            key-positions = <1 7 17>;
            require-prior-idle-ms = <0>;
        };
        combo_169 {
            bindings = <&kp LS(LA(F23))>;
            key-positions = <1 7 18>;
            require-prior-idle-ms = <0>;
        };
        combo_170 {
            bindings = <&kp LS(LMETA(F23))>;
            key-positions = <1 7 19>;
            require-prior-idle-ms = <0>;
        };
        combo_171 {
            bindings = <&kp LA(LMETA(F23))>;
            key-positions = <1 7 20>;
            require-prior-idle-ms = <0>;
        };
        combo_172 {
            bindings = <&kp LC(LS(LA(F23)))>;
            key-positions = <1 7 21>;
            require-prior-idle-ms = <0>;
        };
        combo_173 {
            bindings = <&kp LC(LS(LMETA(F23)))>;
            key-positions = <1 7 22>;
            require-prior-idle-ms = <0>;
        };
        combo_174 {
            bindings = <&kp LC(LA(LMETA(F23)))>;
            key-positions = <1 7 25>;
            require-prior-idle-ms = <0>;
        };
        combo_175 {
            bindings = <&kp LS(LA(LMETA(F23)))>;
            key-positions = <1 7 26>;
            require-prior-idle-ms = <0>;
        };
        combo_176 {
            bindings = <&kp LC(LS(LA(LMETA(F23))))>;
            key-positions = <1 7 27>;
            require-prior-idle-ms = <0>;
        };
        combo_177 {
            bindings = <&kp F24>;
            key-positions = <1 7 28>;
            require-prior-idle-ms = <0>;
        };
        combo_178 {
            bindings = <&kp LC(F24)>;
            key-positions = <1 7 29>;
            require-prior-idle-ms = <0>;
        };
        combo_179 {
            bindings = <&kp LS(F24)>;
            key-positions = <1 7 30>;
            require-prior-idle-ms = <0>;
        };
        combo_180 {
            bindings = <&kp LA(F24)>;
            key-positions = <1 7 31>;
            require-prior-idle-ms = <0>;
        };
        combo_181 {
            bindings = <&kp LMETA(F24)>;
            key-positions = <1 7 32>;
            require-prior-idle-ms = <0>;
        };
        combo_182 {
            bindings = <&kp LC(LS(F24))>;
            key-positions = <1 7 33>;
            require-prior-idle-ms = <0>;
        };
        combo_183 {
            bindings = <&kp LC(LA(F24))>;
            key-positions = <1 7 34>;
            require-prior-idle-ms = <0>;
        };
        combo_184 {
            bindings = <&kp LC(LMETA(F24))>;
            key-positions = <1 7 36>;
            require-prior-idle-ms = <0>;
        };
        combo_185 {
            bindings = <&kp LS(LA(F24))>;
            key-positions = <1 7 37>;
            require-prior-idle-ms = <0>;
        };
        combo_186 {
            bindings = <&kp LS(LMETA(F24))>;
            key-positions = <1 7 38>;
            require-prior-idle-ms = <0>;
        };
        combo_187 {
            bindings = <&kp LA(LMETA(F24))>;
            key-positions = <1 7 39>;
            require-prior-idle-ms = <0>;
        };
        combo_188 {
            bindings = <&kp LC(LS(LA(F24)))>;
            key-positions = <1 7 40>;
            require-prior-idle-ms = <0>;
        };
        combo_189 {
            bindings = <&kp LC(LS(LMETA(F24)))>;
            key-positions = <1 7 41>;
            require-prior-idle-ms = <0>;
        };
        combo_190 {
            bindings = <&kp LC(LA(LMETA(F24)))>;
            key-positions = <1 8 9>;
            require-prior-idle-ms = <0>;
        };
        combo_191 {
            bindings = <&kp LS(LA(LMETA(F24)))>;
            key-positions = <1 8 10>;
            require-prior-idle-ms = <0>;
        };
        combo_192 {
            bindings = <&kp LC(LS(LA(LMETA(F24))))>;
            key-positions = <1 8 13>;
            require-prior-idle-ms = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp F        &kp P                &kp B       &kp M                         &kp L           &kp U                                 &kp Y    &kp J     &none
&none  &kp A  &kp R  &kp S        &hold_tap_mo_kp 3 T  &kp G       &mo 6                         &kp N           &kp E                                 &kp I    &kp O     &none
&none  &kp Z  &kp X  &kp C        &kp D                &kp V       &kp K                         &kp H           &kp COMMA                             &kp DOT  &kp APOS  &none
                     &ctrl_shift  &kp SPACE            &kp LGUI    &shift LEFT_SHIFT LEFT_SHIFT  &backspace_del  &hold_tap_kp_kp_no_idle LEFT_ALT TAB
            >;
        };

        nav {
            bindings = <
&none  &tog_1_mod_morph  &tog_2_mod_morph  &tog_3_mod_morph  &kp P   &kp RIGHT_ALT    &kp PG_UP      &kp K_PREV   &up_mup      &kp K_NEXT     &none            &none
&none  &tog_4_mod_morph  &tog_5_mod_morph  &tog_6_mod_morph  &kp T   &mo 12           &kp PAGE_DOWN  &left_mleft  &down_mdown  &right_mright  &kp PRINTSCREEN  &none
&none  &tog_7_mod_morph  &tog_8_mod_morph  &tog_9_mod_morph  &kp D   &mkp_morph1      &none          &ralt_mb1    &ralt_mb3    &ralt_mb2      &none            &none
                                           &trans            &trans  &trans           &trans         &trans       &trans
            >;
        };

        nav_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        nav_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&none  &kp BACKSLASH  &kp N7        &kp N8        &kp N9        &kp GRAVE      &none   &none   &kp LEFT_BRACKET        &kp RIGHT_BRACKET  &none    &none
&none  &kp N0         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SEMI       &none   &mo 9   &mod_morph_plus_equals  &kp MINUS          &none    &none
&none  &kp SLASH      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &mkp_morph1    &none   &none   &kp COMMA               &kp PERIOD         &kp SQT  &none
                                    &trans        &trans        &trans         &trans  &trans  &trans
            >;
        };

        num_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        func {
            bindings = <
&none  &none  &kp F7  &kp F8  &kp F9  &kp F10    &none   &none   &none   &none  &none  &none
&none  &none  &kp F4  &kp F5  &kp F6  &kp F11    &none   &none   &none   &none  &none  &none
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none   &none   &none   &none  &none  &none
                      &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        func_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        func_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys {
            bindings = <
&none  &kp C_BRIGHTNESS_INC   &kp C_VOLUME_UP    &kp C_NEXT        &none   &none     &none         &none         &none         &none         &none         &none
&none  &kp C_BRIGHTNESS_DEC   &kp C_VOLUME_DOWN  &kp C_PREVIOUS    &none   &none     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &kp C_BRIGHTNESS_AUTO  &kp C_MUTE         &kp C_PLAY_PAUSE  &none   &none     &none         &none         &none         &none         &bt BT_CLR    &none
                                                 &trans            &trans  &trans    &trans        &trans        &trans
            >;
        };

        sys_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        test {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none    &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none    &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &tog 13  &none  &none  &none  &none
                     &none  &none  &none    &none  &none    &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav_lock {
            if-layers = <2>;
            then-layer = <1>;
        };

        nav_temp {
            if-layers = <3>;
            then-layer = <1>;
        };

        func_lock {
            if-layers = <8>;
            then-layer = <7>;
        };

        func_temp {
            if-layers = <9>;
            then-layer = <7>;
        };

        num_lock {
            if-layers = <5>;
            then-layer = <4>;
        };

        num_temp {
            if-layers = <6>;
            then-layer = <4>;
        };

        sys_lock {
            if-layers = <11>;
            then-layer = <10>;
        };

        sys_temp {
            if-layers = <12>;
            then-layer = <10>;
        };
    };
};
