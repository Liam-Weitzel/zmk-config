/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
        hold_tap_mo_kp: hold_tap_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MO_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        hold_tap_tog_kp: hold_tap_tog_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_TOG_KP";
            bindings = <&tog>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <180>;
        };

        backspace_del_base: backspace_del_base {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL_BASE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        backspace_del_func: backspace_del_func {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL_FUNC";
            bindings =
                <&hold_tap_tog_kp 5 BACKSPACE>,
                <&hold_tap_tog_kp 5 DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        backspace_del_nav: backspace_del_nav {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL_NAV";
            bindings =
                <&hold_tap_tog_kp 2 BACKSPACE>,
                <&hold_tap_tog_kp 2 DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        backspace_del_num: backspace_del_num {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL_NUM";
            bindings =
                <&hold_tap_tog_kp 8 BACKSPACE>,
                <&hold_tap_tog_kp 8 DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        backspace_del_sys: backspace_del_sys {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL_SYS";
            bindings =
                <&hold_tap_tog_kp 11 BACKSPACE>,
                <&hold_tap_tog_kp 11 DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        capsword: capsword {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSWORD";
            #binding-cells = <0>;
            continue-list = <A B D C E F G H I J K L M N O P Q R S T U V W X Y Z>;
        };

        caps_capsword_mod_morph: caps_capsword_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS_CAPSWORD_MOD_MORPH";
            bindings = <&kp CAPSLOCK>, <&capsword>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        left_mleft: left_mleft {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_MLEFT";
            bindings = <&kp LEFT>, <U_MS_L>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        right_mright: right_mright {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_MRIGHT";
            bindings = <&kp RIGHT>, <U_MS_R>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        up_mup: up_mup {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_MUP";
            bindings = <&kp UP>, <U_MS_U>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        down_mdown: down_mdown {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_MDOWN";
            bindings = <&kp DOWN_ARROW>, <U_MS_D>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        mod_morph_plus_equals: mod_morph_plus_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_PLUS_EQUALS";
            bindings = <&kp PLUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hold_tap_kp_kp: hold_tap_kp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KP_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        tog_9_mod_morph: tog_9_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_9_MOD_MORPH";
            bindings = <&kp C>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_1_mod_morph: tog_1_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_1_MOD_MORPH";
            bindings = <&kp Q>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_2_mod_morph: tog_2_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_2_MOD_MORPH";
            bindings = <&kp W>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_3_mod_morph: tog_3_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_3_MOD_MORPH";
            bindings = <&kp F>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_4_mod_morph: tog_4_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_4_MOD_MORPH";
            bindings = <&kp A>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_5_mod_morph: tog_5_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_5_MOD_MORPH";
            bindings = <&kp R>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_6_mod_morph: tog_6_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_6_MOD_MORPH";
            bindings = <&kp S>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_7_mod_morph: tog_7_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_7_MOD_MORPH";
            bindings = <&kp Z>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        tog_8_mod_morph: tog_8_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_8_MOD_MORPH";
            bindings = <&kp X>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        hold_tap_kp_kr: hold_tap_kp_kr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KP_KR";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };
    };

    combos {
        compatible = "zmk,combos";

        end {
            bindings = <&kp END>;
            key-positions = <27 28 38>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <27 28 37>;
        };

        esc-left {
            bindings = <&kp ESCAPE>;
            key-positions = <16 15 37>;
        };

        esc-right {
            bindings = <&kp ESCAPE>;
            key-positions = <20 19 40>;
        };

        home-nav {
            bindings = <&kp HOME>;
            key-positions = <27 37>;
            layers = <1 2 3>;
        };

        end-nav {
            bindings = <&kp END>;
            key-positions = <27 38>;
            layers = <1 2 3>;
        };

        end-right {
            bindings = <&kp END>;
            key-positions = <31 32 40>;
        };

        home-right {
            bindings = <&kp HOME>;
            key-positions = <39 31 32>;
        };

        esc-left-nav {
            bindings = <&kp ESCAPE>;
            key-positions = <15 37>;
            layers = <2 1 3>;
        };

        esc-right-num-func {
            bindings = <&kp ESCAPE>;
            key-positions = <20 40>;
            layers = <9 7 8 4 5 6>;
        };

        end-right-num-func {
            bindings = <&kp END>;
            key-positions = <32 40>;
            layers = <7 8 9 4 5 6>;
        };

        home-right-num-func {
            bindings = <&kp HOME>;
            key-positions = <39 32>;
            layers = <7 8 9 4 5 6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp F                         &kp P                        &kp B             &kp J                       &kp L                &kp U      &kp Y    &kp SEMICOLON  &none
&none  &kp A  &kp R  &kp S                         &hold_tap_mo_kp 3 T          &kp G             &kp M                       &hold_tap_mo_kp 9 N  &kp E      &kp I    &kp O          &none
&none  &kp Z  &kp X  &kp C                         &kp D                        &kp V             &kp K                       &hold_tap_mo_kp 6 H  &kp COMMA  &kp DOT  &kp APOS       &none
                     &hold_tap_kp_kp LEFT_ALT TAB  &hold_tap_kp_kp LCTRL SPACE  &kp LEFT_SHIFT    &hold_tap_kp_kr LEFT_GUI 0  &backspace_del_base  &kp ENTER
            >;
        };

        nav {
            bindings = <
&none  &tog_1_mod_morph  &tog_2_mod_morph  &tog_3_mod_morph              &kp P                        &kp B             &kp PG_UP                   &mkp LCLK           &up_mup                          &mkp RCLK      &caps_capsword_mod_morph  &none
&none  &tog_4_mod_morph  &tog_5_mod_morph  &tog_6_mod_morph              &none                        &mo 12            &kp PAGE_DOWN               &left_mleft         &down_mdown                      &right_mright  &none                     &none
&none  &tog_7_mod_morph  &tog_8_mod_morph  &tog_9_mod_morph              &kp D                        &kp V             &none                       &none               &none                            &none          &kp PRINTSCREEN           &none
                                           &hold_tap_kp_kp LEFT_ALT TAB  &hold_tap_kp_kp LCTRL SPACE  &kp LEFT_SHIFT    &hold_tap_kp_kr LEFT_GUI 0  &backspace_del_nav  &hold_tap_kp_kp RIGHT_ALT ENTER
            >;
        };

        nav_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        nav_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        func {
            bindings = <
&none  &none  &kp F7  &kp F8                        &kp F9                       &mkp LCLK     &kp F20                     &kp F21              &kp F22    &kp F23  &kp F24  &none
&none  &none  &kp F4  &kp F5                        &kp F6                       &mkp RCLK     &kp F15                     &kp F16              &kp F17    &kp F18  &kp F19  &none
&none  &none  &kp F1  &kp F2                        &kp F3                       &mkp MCLK     &kp F10                     &kp F11              &kp F12    &kp F13  &kp F14  &none
                      &hold_tap_kp_kp LEFT_ALT TAB  &hold_tap_kp_kp LCTRL SPACE  &kp LSHIFT    &hold_tap_kp_kr LEFT_GUI 0  &backspace_del_func  &kp ENTER
            >;
        };

        func_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        func_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&none  &kp BACKSLASH  &kp N7        &kp N8                        &kp N9                       &mkp LCLK         &none                       &none               &kp LEFT_BRACKET        &kp RIGHT_BRACKET  &kp SEMICOLON  &none
&none  &kp N0         &kp NUMBER_4  &kp N5                        &kp NUMBER_6                 &mkp RCLK         &none                       &none               &mod_morph_plus_equals  &kp MINUS          &kp GRAVE      &none
&none  &kp SLASH      &kp NUMBER_1  &kp NUMBER_2                  &kp NUMBER_3                 &mkp MCLK         &none                       &none               &kp COMMA               &kp PERIOD         &kp SQT        &none
                                    &hold_tap_kp_kp LEFT_ALT TAB  &hold_tap_kp_kp LCTRL SPACE  &kp LEFT_SHIFT    &hold_tap_kp_kr LEFT_GUI 0  &backspace_del_num  &kp ENTER
            >;
        };

        num_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys {
            bindings = <
&none  &kp C_BRIGHTNESS_INC   &kp C_VOLUME_UP    &kp C_NEXT                    &none                        &none             &none                       &none               &none         &none         &none         &none
&none  &kp C_BRIGHTNESS_DEC   &kp C_VOLUME_DOWN  &kp C_PREVIOUS                &none                        &none             &bt BT_SEL 0                &bt BT_SEL 1        &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &kp C_BRIGHTNESS_AUTO  &kp C_MUTE         &kp C_PLAY_PAUSE              &none                        &none             &none                       &none               &none         &none         &bt BT_CLR    &none
                                                 &hold_tap_kp_kp LEFT_ALT TAB  &hold_tap_kp_kp LCTRL SPACE  &kp LEFT_SHIFT    &hold_tap_kp_kr LEFT_GUI 0  &backspace_del_sys  &kp ENTER
            >;
        };

        sys_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_13 {
            bindings = <
&trans  &trans  &trans  &trans  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &tog 13  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans   &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer_2_lock {
            if-layers = <2>;
            then-layer = <1>;
        };

        layer_2_temp {
            if-layers = <3>;
            then-layer = <1>;
        };

        layer_3_lock {
            if-layers = <5>;
            then-layer = <4>;
        };

        layer_3_temp {
            if-layers = <6>;
            then-layer = <4>;
        };

        layer_4_lock {
            if-layers = <8>;
            then-layer = <7>;
        };

        layer_4_temp {
            if-layers = <9>;
            then-layer = <7>;
        };

        layer_5_lock {
            if-layers = <10>;
            then-layer = <10>;
        };

        layer_5_temp {
            if-layers = <10>;
            then-layer = <10>;
        };

        layer_6_lock {
            if-layers = <11>;
            then-layer = <10>;
        };

        layer_6_temp {
            if-layers = <12>;
            then-layer = <10>;
        };
    };
};
