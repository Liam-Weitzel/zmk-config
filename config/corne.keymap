/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "mouse.dtsi"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hold_tap_mo_kp: hold_tap_mo_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MO_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        backspace_del: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        left_mleft: left_mleft {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_MLEFT";
            bindings = <&kp LEFT>, <U_MS_L>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        right_mright: right_mright {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_MRIGHT";
            bindings = <&kp RIGHT>, <U_MS_R>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        up_mup: up_mup {
            compatible = "zmk,behavior-mod-morph";
            label = "UP_MUP";
            bindings = <&kp UP>, <U_MS_U>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        down_mdown: down_mdown {
            compatible = "zmk,behavior-mod-morph";
            label = "DOWN_MDOWN";
            bindings = <&kp DOWN_ARROW>, <U_MS_D>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        mod_morph_plus_equals: mod_morph_plus_equals {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_PLUS_EQUALS";
            bindings = <&kp PLUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hold_tap_kp_kp_no_idle: hold_tap_kp_kp_no_idle {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_KP_KP_NO_IDLE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            quick-tap-ms = <180>;
        };

        tog_9_mod_morph: tog_9_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_9_MOD_MORPH";
            bindings = <&kp C>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_1_mod_morph: tog_1_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_1_MOD_MORPH";
            bindings = <&kp Q>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_2_mod_morph: tog_2_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_2_MOD_MORPH";
            bindings = <&kp W>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_3_mod_morph: tog_3_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_3_MOD_MORPH";
            bindings = <&kp F>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_4_mod_morph: tog_4_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_4_MOD_MORPH";
            bindings = <&kp A>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_5_mod_morph: tog_5_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_5_MOD_MORPH";
            bindings = <&kp R>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_6_mod_morph: tog_6_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_6_MOD_MORPH";
            bindings = <&kp S>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_7_mod_morph: tog_7_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_7_MOD_MORPH";
            bindings = <&kp Z>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        tog_8_mod_morph: tog_8_mod_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "TOG_8_MOD_MORPH";
            bindings = <&kp X>, <&tog 13>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        sticky_key: sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <120>;
            quick-release;
        };

        shift: shift {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT";
            bindings = <&kp>, <&sticky_key>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
        };

        ctrl_shift: ctrl_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "CTRL_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp RSHIFT>;

            tapping-term-ms = <300>;
        };

        ralt_mb1: ralt_mb1 {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_MB1";
            bindings = <&mkp MB1>, <&mkp MB1>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        ralt_mb2: ralt_mb2 {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_MB2";
            bindings = <&mkp MB2>, <&mkp MB2>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        ralt_mb3: ralt_mb3 {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_MB3";
            bindings = <&mkp MB3>, <&mkp MB3>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        mkp_morph1: mkp_morph1 {
            compatible = "zmk,behavior-mod-morph";
            label = "MKP_MORPH1";
            bindings = <&mkp_morph2>, <&mkp MB2>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        mkp_morph2: mkp_morph2 {
            compatible = "zmk,behavior-mod-morph";
            label = "MKP_MORPH2";
            bindings = <&mkp MB1>, <&mkp MB3>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        stn_shift_ {
            key-positions = <15 16 19 39>;
            bindings = <&kp F13>;
        };

        aro_shift_ {
            key-positions = <13 14 22 39>;
            bindings = <&kp F14>;
        };

        sig_shift_ {
            key-positions = <15 17 21 39>;
            bindings = <&kp F15>;
        };

        con_shift_ {
            key-positions = <19 22 27 39>;
            bindings = <&kp F16>;
        };

        npr_shift_ {
            key-positions = <4 14 19 39>;
            bindings = <&kp F17>;
        };

        vir_shift_ {
            key-positions = <14 21 29 39>;
            bindings = <&kp F18>;
        };

        sta_shift_ {
            key-positions = <13 15 16 39>;
            bindings = <&kp F19>;
        };

        voi_shift_ {
            key-positions = <21 22 29 39>;
            bindings = <&kp F20>;
        };

        aut_shift_ {
            key-positions = <8 13 16 39>;
            bindings = <&kp F21>;
        };

        ret_shift_ {
            key-positions = <14 16 20 39>;
            bindings = <&kp F22>;
        };

        inc_shift_ {
            key-positions = <19 21 27 39>;
            bindings = <&kp F23>;
        };

        def_shift_ {
            key-positions = <3 20 28 39>;
            bindings = <&kp F24>;
        };

        str_shift_ {
            key-positions = <14 15 16 39>;
            bindings = <&kp LC(F13)>;
        };

        ty_shift_ {
            key-positions = <9 16 39>;
            bindings = <&kp LC(F14)>;
        };

        map_shift_ {
            key-positions = <4 6 13 39>;
            bindings = <&kp LC(F15)>;
        };

        set_shift_ {
            key-positions = <15 16 20 39>;
            bindings = <&kp LC(F16)>;
        };

        deq_shift_ {
            key-positions = <1 20 28 39>;
            bindings = <&kp LC(F17)>;
        };

        pai_shift_ {
            key-positions = <4 13 21 39>;
            bindings = <&kp LC(F18)>;
        };

        npai_shift_ {
            key-positions = <4 13 19 21 39>;
            bindings = <&kp LC(F19)>;
        };

        ple_shift_ {
            key-positions = <4 7 20 39>;
            bindings = <&kp LC(F20)>;
        };

        vec_shift_ {
            key-positions = <20 27 29 39>;
            bindings = <&kp LC(F21)>;
        };

        fex {
            key-positions = <3 20 26>;
            bindings = <&kp LC(F22)>;
        };

        imo {
            key-positions = <6 21 22>;
            bindings = <&kp LC(F23)>;
        };

        note {
            key-positions = <16 19 20 22>;
            bindings = <&kp LC(F24)>;
        };

        bra {
            key-positions = <5 13 14>;
            bindings = <&kp RC(F13)>;
        };

        thx {
            key-positions = <16 26 31>;
            bindings = <&kp RC(F14)>;
        };

        lam {
            key-positions = <6 7 13>;
            bindings = <&kp RC(F15)>;
        };

        gmai {
            key-positions = <6 13 17 21>;
            bindings = <&kp RC(F16)>;
        };

        rosh {
            key-positions = <14 15 22 31>;
            bindings = <&kp RC(F17)>;
        };

        oldf {
            key-positions = <3 7 22 28>;
            bindings = <&kp RC(F18)>;
        };

        infra {
            key-positions = <3 13 14 19 21>;
            bindings = <&kp RC(F19)>;
        };

        undra {
            key-positions = <8 13 14 19 28>;
            bindings = <&kp RC(F20)>;
        };

        midc {
            key-positions = <6 21 27 28>;
            bindings = <&kp RC(F21)>;
        };

        econy {
            key-positions = <9 19 20 22 27>;
            bindings = <&kp RC(F22)>;
        };

        survi {
            key-positions = <8 14 15 21 29>;
            bindings = <&kp RC(F23)>;
        };

        avil {
            key-positions = <7 13 21 29>;
            bindings = <&kp RC(F24)>;
        };

        jury {
            key-positions = <8 9 10 14>;
            bindings = <&kp LS(F13)>;
        };

        dely {
            key-positions = <7 9 20 28>;
            bindings = <&kp LS(F14)>;
        };

        usgi {
            key-positions = <8 15 17 21>;
            bindings = <&kp LS(F15)>;
        };

        insto {
            key-positions = <15 16 19 21 22>;
            bindings = <&kp LS(F16)>;
        };

        serva {
            key-positions = <13 14 15 20 29>;
            bindings = <&kp LS(F17)>;
        };

        conq {
            key-positions = <1 19 22 27>;
            bindings = <&kp LS(F18)>;
        };

        apr {
            key-positions = <4 13 14>;
            bindings = <&kp LS(F19)>;
        };

        metr {
            key-positions = <6 14 16 20>;
            bindings = <&kp LS(F20)>;
        };

        chri {
            key-positions = <14 21 27 31>;
            bindings = <&kp LS(F21)>;
        };

        enpr {
            key-positions = <4 14 19 20>;
            bindings = <&kp LS(F22)>;
        };

        prane {
            key-positions = <4 13 14 19 20>;
            bindings = <&kp LS(F23)>;
        };

        prou {
            key-positions = <4 8 14 22>;
            bindings = <&kp LS(F24)>;
        };

        refig {
            key-positions = <3 14 17 20 21>;
            bindings = <&kp LA(F13)>;
        };

        carb {
            key-positions = <5 13 14 27>;
            bindings = <&kp LA(F14)>;
        };

        hist {
            key-positions = <15 16 21 31>;
            bindings = <&kp LA(F15)>;
        };

        comp {
            key-positions = <4 6 22 27>;
            bindings = <&kp LA(F16)>;
        };

        rpec {
            key-positions = <4 14 20 27>;
            bindings = <&kp LA(F17)>;
        };

        trasm {
            key-positions = <6 13 14 15 16>;
            bindings = <&kp LA(F18)>;
        };

        anouc {
            key-positions = <8 13 19 22 27>;
            bindings = <&kp LA(F19)>;
        };

        siten {
            key-positions = <15 16 19 20 21>;
            bindings = <&kp LA(F20)>;
        };

        welm {
            key-positions = <2 6 7 20>;
            bindings = <&kp LA(F21)>;
        };

        archi {
            key-positions = <13 14 21 27 31>;
            bindings = <&kp LA(F22)>;
        };

        civ {
            key-positions = <21 27 29>;
            bindings = <&kp LA(F23)>;
        };

        moy {
            key-positions = <6 9 22>;
            bindings = <&kp LA(F24)>;
        };

        expi {
            key-positions = <4 20 21 26>;
            bindings = <&kp RA(F13)>;
        };

        supr {
            key-positions = <4 8 14 15>;
            bindings = <&kp RA(F14)>;
        };

        dram {
            key-positions = <6 13 14 28>;
            bindings = <&kp RA(F15)>;
        };

        prs {
            key-positions = <4 14 15>;
            bindings = <&kp RA(F16)>;
        };

        phor {
            key-positions = <4 14 22 31>;
            bindings = <&kp RA(F17)>;
        };

        cign {
            key-positions = <17 19 21 27>;
            bindings = <&kp RA(F18)>;
        };

        intro {
            key-positions = <14 16 19 21 22>;
            bindings = <&kp RA(F19)>;
        };

        taion {
            key-positions = <13 16 19 21 22>;
            bindings = <&kp RA(F20)>;
        };

        hq_space_ {
            key-positions = <1 31 37>;
            bindings = <&kp RA(F21)>;
        };

        int {
            key-positions = <16 19 21>;
            bindings = <&kp RA(F22)>;
        };

        sat {
            key-positions = <13 15 16>;
            bindings = <&kp RA(F23)>;
        };

        nevr {
            key-positions = <14 19 20 29>;
            bindings = <&kp RA(F24)>;
        };

        conv {
            key-positions = <19 22 27 29>;
            bindings = <&kp LG(F13)>;
        };

        sion {
            key-positions = <15 19 21 22>;
            bindings = <&kp LG(F14)>;
        };

        distr {
            key-positions = <14 15 16 21 28>;
            bindings = <&kp LG(F15)>;
        };

        penc {
            key-positions = <4 19 20 27>;
            bindings = <&kp LG(F16)>;
        };

        spe_space_ {
            key-positions = <4 15 20 37>;
            bindings = <&kp LG(F17)>;
        };

        spe {
            key-positions = <4 15 20>;
            bindings = <&kp LG(F18)>;
        };

        chap {
            key-positions = <4 13 27 31>;
            bindings = <&kp LG(F19)>;
        };

        camp {
            key-positions = <4 6 13 27>;
            bindings = <&kp LG(F20)>;
        };

        agri {
            key-positions = <13 14 17 21>;
            bindings = <&kp LG(F21)>;
        };

        exp {
            key-positions = <4 20 26>;
            bindings = <&kp LG(F22)>;
        };

        sophiae {
            key-positions = <4 13 15 20 21 22 31>;
            bindings = <&kp LG(F23)>;
        };

        envi {
            key-positions = <19 20 21 29>;
            bindings = <&kp LG(F24)>;
        };

        grad {
            key-positions = <13 14 17 28>;
            bindings = <&kp RG(F13)>;
        };

        mid {
            key-positions = <6 21 28>;
            bindings = <&kp RG(F14)>;
        };

        econ {
            key-positions = <19 20 22 27>;
            bindings = <&kp RG(F15)>;
        };

        surv {
            key-positions = <8 14 15 29>;
            bindings = <&kp RG(F16)>;
        };

        avile {
            key-positions = <7 13 20 21 29>;
            bindings = <&kp RG(F17)>;
        };

        deli {
            key-positions = <7 20 21 28>;
            bindings = <&kp RG(F18)>;
        };

        insta {
            key-positions = <13 15 16 19 21>;
            bindings = <&kp RG(F19)>;
        };

        serv {
            key-positions = <14 15 20 29>;
            bindings = <&kp RG(F20)>;
        };

        conqe {
            key-positions = <1 19 20 22 27>;
            bindings = <&kp RG(F21)>;
        };

        comt {
            key-positions = <6 16 22 27>;
            bindings = <&kp RG(F22)>;
        };

        dev {
            key-positions = <20 28 29>;
            bindings = <&kp RG(F23)>;
        };

        pre {
            key-positions = <4 14 20>;
            bindings = <&kp RG(F24)>;
        };

        fort {
            key-positions = <3 14 16 22>;
            bindings = <&kp RC(LC(F13))>;
        };

        eft {
            key-positions = <3 16 20>;
            bindings = <&kp RC(LC(F14))>;
        };

        adm {
            key-positions = <6 13 28>;
            bindings = <&kp RC(LC(F15))>;
        };

        nat {
            key-positions = <13 16 19>;
            bindings = <&kp RC(LC(F16))>;
        };

        front {
            key-positions = <3 14 16 19 22>;
            bindings = <&kp RC(LC(F17))>;
        };

        cong {
            key-positions = <17 19 22 27>;
            bindings = <&kp RC(LC(F18))>;
        };

        coni {
            key-positions = <19 21 22 27>;
            bindings = <&kp RC(LC(F19))>;
        };

        dicr {
            key-positions = <14 21 27 28>;
            bindings = <&kp RC(LC(F20))>;
        };

        parti {
            key-positions = <4 13 14 16 21>;
            bindings = <&kp RC(LC(F21))>;
        };

        mauf {
            key-positions = <3 6 8 13>;
            bindings = <&kp RC(LC(F22))>;
        };

        contr {
            key-positions = <14 16 19 22 27>;
            bindings = <&kp RC(LC(F23))>;
        };

        comu {
            key-positions = <6 8 22 27>;
            bindings = <&kp RC(LC(F24))>;
        };

        sub {
            key-positions = <5 8 15>;
            bindings = <&kp LS(LC(F13))>;
        };

        conet {
            key-positions = <16 19 20 22 27>;
            bindings = <&kp LS(LC(F14))>;
        };

        inves {
            key-positions = <15 19 20 21 29>;
            bindings = <&kp LS(LC(F15))>;
        };

        instr {
            key-positions = <14 15 16 19 21>;
            bindings = <&kp LS(LC(F16))>;
        };

        cola {
            key-positions = <7 13 22 27>;
            bindings = <&kp LS(LC(F17))>;
        };

        demo {
            key-positions = <6 20 22 28>;
            bindings = <&kp LS(LC(F18))>;
        };

        respo {
            key-positions = <4 14 15 20 22>;
            bindings = <&kp LS(LC(F19))>;
        };

        apx {
            key-positions = <4 13 26>;
            bindings = <&kp LS(LC(F20))>;
        };

        inst {
            key-positions = <15 16 19 21>;
            bindings = <&kp LS(LC(F21))>;
        };

        undr {
            key-positions = <8 14 19 28>;
            bindings = <&kp LS(LC(F22))>;
        };

        corend {
            key-positions = <14 19 20 22 27 28>;
            bindings = <&kp LS(LC(F23))>;
        };

        compr {
            key-positions = <4 6 14 22 27>;
            bindings = <&kp LS(LC(F24))>;
        };

        psyh {
            key-positions = <4 9 15 31>;
            bindings = <&kp LA(LC(F13))>;
        };

        conti {
            key-positions = <16 19 21 22 27>;
            bindings = <&kp LA(LC(F14))>;
        };

        revo {
            key-positions = <14 20 22 29>;
            bindings = <&kp LA(LC(F15))>;
        };

        phiso {
            key-positions = <4 15 21 22 31>;
            bindings = <&kp LA(LC(F16))>;
        };

        instru {
            key-positions = <8 14 15 16 19 21>;
            bindings = <&kp LA(LC(F17))>;
        };

        tech {
            key-positions = <16 20 27 31>;
            bindings = <&kp LA(LC(F18))>;
        };

        trans {
            key-positions = <13 14 15 16 19>;
            bindings = <&kp LA(LC(F19))>;
        };

        entr {
            key-positions = <14 16 19 20>;
            bindings = <&kp LA(LC(F20))>;
        };

        auto {
            key-positions = <8 13 16 22>;
            bindings = <&kp LA(LC(F21))>;
        };

        con {
            key-positions = <19 22 27>;
            bindings = <&kp LA(LC(F22))>;
        };

        inter {
            key-positions = <14 16 19 20 21>;
            bindings = <&kp LA(LC(F23))>;
        };

        recom {
            key-positions = <6 14 20 22 27>;
            bindings = <&kp LA(LC(F24))>;
        };

        tra_space_ {
            key-positions = <13 14 16 37>;
            bindings = <&kp RA(LC(F13))>;
        };

        reps {
            key-positions = <4 14 15 20>;
            bindings = <&kp RA(LC(F14))>;
        };

        ordi {
            key-positions = <14 21 22 28>;
            bindings = <&kp RA(LC(F15))>;
        };

        esta {
            key-positions = <13 15 16 20>;
            bindings = <&kp RA(LC(F16))>;
        };

        derm {
            key-positions = <6 14 20 28>;
            bindings = <&kp RA(LC(F17))>;
        };

        char {
            key-positions = <13 14 27 31>;
            bindings = <&kp RA(LC(F18))>;
        };

        qust {
            key-positions = <1 8 15 16>;
            bindings = <&kp RA(LC(F19))>;
        };

        prio {
            key-positions = <4 14 21 22>;
            bindings = <&kp RA(LC(F20))>;
        };

        iden {
            key-positions = <19 20 21 28>;
            bindings = <&kp RA(LC(F21))>;
        };

        sign {
            key-positions = <15 17 19 21>;
            bindings = <&kp RA(LC(F22))>;
        };

        end_left {
            bindings = <&kp END>;
            key-positions = <27 28 38>;
        };

        home_left {
            bindings = <&kp HOME>;
            key-positions = <27 28 37>;
        };

        esc_left {
            bindings = <&kp ESCAPE>;
            key-positions = <16 15 37>;
        };

        esc_right {
            bindings = <&kp ESCAPE>;
            key-positions = <20 19 40>;
        };

        end_right {
            bindings = <&kp END>;
            key-positions = <31 32 40>;
        };

        home_right {
            bindings = <&kp HOME>;
            key-positions = <39 31 32>;
        };

        shift_copy_left {
            bindings = <&kp LS(LC(C))>;
            key-positions = <38 15 28>;
        };

        shift_paste_left {
            bindings = <&kp LS(LC(V))>;
            key-positions = <38 15 29>;
        };

        ctrl_shift_t_left {
            bindings = <&kp LC(LS(T))>;
            key-positions = <36 15 16>;
        };

        nav_lock {
            bindings = <&tog 2>;
            key-positions = <31 32 33>;
            layers = <1 2 3>;
        };

        func_lock {
            bindings = <&tog 8>;
            key-positions = <26 27 28>;
            layers = <7 8 9>;
        };

        num_lock {
            bindings = <&tog 5>;
            key-positions = <26 27 28>;
            layers = <5 4 6>;
        };

        sys_lock {
            bindings = <&tog 11>;
            key-positions = <31 32 33>;
            layers = <11 11 12>;
        };

        quit_left {
            bindings = <&kp LS(LG(Q))>;
            key-positions = <16 38 1>;
        };

        enter_left {
            bindings = <&kp ENTER>;
            key-positions = <38 15 16>;
        };

        enter_right {
            bindings = <&kp ENTER>;
            key-positions = <20 19 39>;
        };

        backspace_left {
            bindings = <&kp BACKSPACE>;
            key-positions = <15 38 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp F        &kp P                &kp B       &kp M                         &kp L           &kp U                                 &kp Y    &kp J     &none
&none  &kp A  &kp R  &kp S        &hold_tap_mo_kp 3 T  &kp G       &mo 6                         &kp N           &kp E                                 &kp I    &kp O     &none
&none  &kp Z  &kp X  &kp C        &kp D                &kp V       &kp K                         &kp H           &kp COMMA                             &kp DOT  &kp APOS  &none
                     &ctrl_shift  &kp SPACE            &kp LGUI    &shift LEFT_SHIFT LEFT_SHIFT  &backspace_del  &hold_tap_kp_kp_no_idle LEFT_ALT TAB
            >;
        };

        nav {
            bindings = <
&none  &tog_1_mod_morph  &tog_2_mod_morph  &tog_3_mod_morph  &kp P   &kp RIGHT_ALT    &kp PG_UP      &kp K_PREV   &up_mup      &kp K_NEXT     &none            &none
&none  &tog_4_mod_morph  &tog_5_mod_morph  &tog_6_mod_morph  &kp T   &mo 12           &kp PAGE_DOWN  &left_mleft  &down_mdown  &right_mright  &kp PRINTSCREEN  &none
&none  &tog_7_mod_morph  &tog_8_mod_morph  &tog_9_mod_morph  &kp D   &mkp_morph1      &none          &ralt_mb1    &ralt_mb3    &ralt_mb2      &none            &none
                                           &trans            &trans  &trans           &trans         &trans       &trans
            >;
        };

        nav_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        nav_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&none  &kp BACKSLASH  &kp N7        &kp N8        &kp N9        &kp GRAVE      &none   &none   &kp LEFT_BRACKET        &kp RIGHT_BRACKET  &none    &none
&none  &kp N0         &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SEMI       &none   &mo 9   &mod_morph_plus_equals  &kp MINUS          &none    &none
&none  &kp SLASH      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &mkp_morph1    &none   &none   &kp COMMA               &kp PERIOD         &kp SQT  &none
                                    &trans        &trans        &trans         &trans  &trans  &trans
            >;
        };

        num_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        num_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        func {
            bindings = <
&none  &none  &kp F7  &kp F8  &kp F9  &kp F10    &none   &none   &none   &none  &none  &none
&none  &none  &kp F4  &kp F5  &kp F6  &kp F11    &none   &none   &none   &none  &none  &none
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none   &none   &none   &none  &none  &none
                      &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        func_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        func_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys {
            bindings = <
&none  &kp C_BRIGHTNESS_INC   &kp C_VOLUME_UP    &kp C_NEXT        &none   &none     &none         &none         &none         &none         &none         &none
&none  &kp C_BRIGHTNESS_DEC   &kp C_VOLUME_DOWN  &kp C_PREVIOUS    &none   &none     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &kp C_BRIGHTNESS_AUTO  &kp C_MUTE         &kp C_PLAY_PAUSE  &none   &none     &none         &none         &none         &none         &bt BT_CLR    &none
                                                 &trans            &trans  &trans    &trans        &trans        &trans
            >;
        };

        sys_lock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        sys_temp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        test {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none    &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none    &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &tog 13  &none  &none  &none  &none
                     &none  &none  &none    &none  &none    &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav_lock {
            if-layers = <2>;
            then-layer = <1>;
        };

        nav_temp {
            if-layers = <3>;
            then-layer = <1>;
        };

        func_lock {
            if-layers = <8>;
            then-layer = <7>;
        };

        func_temp {
            if-layers = <9>;
            then-layer = <7>;
        };

        num_lock {
            if-layers = <5>;
            then-layer = <4>;
        };

        num_temp {
            if-layers = <6>;
            then-layer = <4>;
        };

        sys_lock {
            if-layers = <11>;
            then-layer = <10>;
        };

        sys_temp {
            if-layers = <12>;
            then-layer = <10>;
        };
    };
};
